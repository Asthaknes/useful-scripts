#!/usr/bin/perl

# gscp - shortcut for scp'ing files between localhost and a SSH git remote

use strict;
use warnings;

use File::Spec;

sub help {
    print <<"END_HELP";
usage: $0 [files...] remote:
       $0 remote:filename [destination]

Simply a shortcut for scp.  For example, if you have the following remote
in your Git repository:

  origin ssh://my.server/projects/example/

'gscp EXAMPLE.pod origin:' would be equivalent to
'scp EXAMPLE.pod my.server:projects/example/'

Useful for transferring patches and helper scripts you intend to use on a
different machine.
END_HELP

    exit 0;
}

sub resolve_remote {
    my ( $remote ) = @_;

    my $output = qx(git remote show -n $remote);
    if($?) {
        exit($?);
    }
    if($output =~ /Push\s*URL:\s*(.*)\n/) {
        my $destination = $1;

        if($destination =~ m!ssh://([^/]+)/(.*)!) {
            $destination = join(':', $1, $2);
        }
        $destination .= '/' unless $destination =~ /\/$/;
        return $destination;
    } else {
        die "git remote show output was not what I expected!\n";
    }
}

help() unless @ARGV;

my $destination = pop @ARGV;

if($destination =~ /:$/) {
    $destination =~ s/:$//;
    $destination = resolve_remote($destination);
} else {
    foreach my $arg (@ARGV) {
        if($arg =~ /(.*):(.*)/) {
            my ( $remote, $filename ) = ( $1, $2 );

            my $destination = resolve_remote($remote);
            $arg            = File::Spec->catfile($destination, $filename);
        }
    }
}

exec 'scp', @ARGV, $destination;
