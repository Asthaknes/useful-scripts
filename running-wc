#!/usr/bin/env perl

use strict;
use warnings;
use feature 'state';

use Carp qw(croak);
use IO::Interactive qw(is_interactive);
use Getopt::Long;
use Readonly;

Readonly::Scalar my $SAVE_CURSOR    => "\e[s";
Readonly::Scalar my $RESTORE_CURSOR => "\e[u";
Readonly::Scalar my $ERASE_LINE     => "\e[1K";

sub usage {
    die <<"END_USAGE";
usage: $0 [-cl] [-d delay]

$0 provides a running total of the number of bytes or lines present
in a stream.

-c       Count the number of bytes.
-d delay Wait delay seconds between updates.  Defaults to 0.
-l       Count the number of lines.
END_USAGE
}

sub init_count {
    local $| = 1;

    print $SAVE_CURSOR;

    update_count(0);
}

sub update_count {
    my ( $count, $delay ) = @_;

    state $last_update_epoch = 0;

    $delay //= 0;

    my $epoch = time();

    if($epoch - $last_update_epoch >= $delay) {
        local $| = 1;
        print "$ERASE_LINE$RESTORE_CURSOR$count";
        $last_update_epoch = $epoch;
    }
}

my $count_bytes;
my $count_lines;
my $delay = 0;

my $ok = GetOptions(
    'c'   => \$count_bytes,
    'd=i' => \$delay,
    'l'   => \$count_lines,
);

usage() unless $ok;

$count_bytes = 1 if !$count_bytes && !$count_lines;

if($count_bytes) {
    if($count_lines) {
        croak "-c and -l are mutually exclusive\n";
    }
    $/ = \1; # one character at a time
} # else, count_lines is on and we don't need to mess with $/

if(is_interactive()) {
    croak "You don't want to run me in interactive mode.\n";
}

my $count = 0;
init_count();

while(<>) {
    $count++;

    update_count($count, $delay);
}

print "\n"; # don't print the following prompt on the same line
